"use strict";(self.webpackChunktherynamo=self.webpackChunktherynamo||[]).push([[796],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),c=o,h=d["".concat(s,".").concat(c)]||d[c]||m[c]||r;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6976:(e,t,n)=>{n.d(t,{z:()=>o});var a=n(7294);const o=e=>{let{src:t,size:n,altText:o}=e;return a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("div",{style:{display:"flex",justifyContent:"center",alignItems:"center",flexWrap:"wrap"}},a.createElement("img",{className:"shadow--tl",src:t,width:`${n}`,style:{border:"1px solid #fff",borderRadius:"3px"}}),a.createElement("p",{className:"ifm-color-primary-dark",style:{fontSize:"12px",fontStyle:"italic",paddingTop:"4px"}},o)),a.createElement("br",null))}},6899:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(7462),o=(n(7294),n(3905)),r=n(6976);const i={authors:"me",slug:"happy-plants",title:"\ud83c\udf3f A Quest for Happy Plants",tags:["typescript","node","raspberry pi","automation"]},l=void 0,s={permalink:"/blog/happy-plants",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2020-03-20-a-quest-for-happy-plants/index.mdx",source:"@site/blog/2020-03-20-a-quest-for-happy-plants/index.mdx",title:"\ud83c\udf3f A Quest for Happy Plants",description:"This article is also available on Dev.to where it was originally posted.",date:"2020-03-20T00:00:00.000Z",formattedDate:"March 20, 2020",tags:[{label:"typescript",permalink:"/blog/tags/typescript"},{label:"node",permalink:"/blog/tags/node"},{label:"raspberry pi",permalink:"/blog/tags/raspberry-pi"},{label:"automation",permalink:"/blog/tags/automation"}],readingTime:10.515,hasTruncateMarker:!1,authors:[{name:"Theryn Groetken",title:"Dad, Software Engineer, Wanna-Be Horticulturist",url:"https://github.com/therynamo",imageURL:"https://github.com/therynamo.png",key:"me"}],frontMatter:{authors:"me",slug:"happy-plants",title:"\ud83c\udf3f A Quest for Happy Plants",tags:["typescript","node","raspberry pi","automation"]}},p={authorsImageUrls:[void 0]},u=[{value:"Tech Stack",id:"tech-stack",level:2},{value:"Node/Yarn",id:"nodeyarn",level:2},{value:"Influx/Grafana",id:"influxgrafana",level:2},{value:"VSCode",id:"vscode",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Quick Start",id:"quick-start",level:3},{value:"Project Dependencies",id:"project-dependencies",level:2},{value:"Can We See Some Code Already?",id:"can-we-see-some-code-already",level:2}],d={toc:u};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"Origination",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"This article is also available on ",(0,o.kt)("a",{parentName:"p",href:"https://dev.to/therynamo/a-quest-for-happy-plants-with-iot-14p1"},"Dev.to")," where it was originally posted.")),(0,o.kt)("p",null,"Automating things has always been fascinating even when practicality is thrown out the window. It is incredible what you can do with just a little elbow grease."),(0,o.kt)("p",null,"I recently started tending to plants in my time at home over the last year. Most of which ended up being vegetables. During that time I've done a lot of reading about how to make my plants happy. One thing I know for sure, is even after a year of constant tending, I know nothing \ud83d\ude01. But that is the beauty of it, there is always something more to learn!"),(0,o.kt)("p",null,"In my quest to make my plants happy, I came across myriad posts, articles, comments, etc. Each of which outlined many environmental specificities you must follow to give your plants the lives they deserve. And though plants (in our case vegetables) are resilient outside, once you bring them inside or use a different medium than soil (hydroponics) they become quite needy."),(0,o.kt)("p",null,"There are many factors that determine a quality environment for your plants. One of the keywords that kept coming up in my quest for the most joyful plants in the world was ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Humidity"},'"room humidity"'),' (RH). According to Wikipedia, 30-50% humidity is a "normal" range for an average household. Our vegetables, however, like that humidity a little higher so they can breathe. In order to simulate a healthy growing environment for vegetation, we can shoot for ~70-75% RH. And that is what this post is going to focus on.'),(0,o.kt)("p",null,"How to set up, track, and measure the temperature and room humidity of your space."),(0,o.kt)("h1",{id:"part-list"},"Part List"),(0,o.kt)("p",null,"I chose to use cheap-ish materials, but I'm positive you could find a way to do this far cheaper than what I've got here."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.raspberrypi.org/products/raspberry-pi-4-model-b/"},"Raspberry Pi 4 Model B")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.amazon.com/gp/product/B08HCHS64Y/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1"},"200GB Sandisk MicroSD")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.amazon.com/gp/product/B07WT2HJ4F/ref=ppx_yo_dt_b_asin_title_o06_s00?ie=UTF8&psc=1"},"DHT11 Temp/Humidity Sensor"))),(0,o.kt)("p",null,"That's it! That is all you need to get up and running for this post."),(0,o.kt)("h1",{id:"getting-started"},"Getting Started"),(0,o.kt)("p",null,"Thankfully, there are many smart people out there on the internet with multiple tutorials on how to set up Raspbian on a Raspberry Pi. ",(0,o.kt)("a",{parentName:"p",href:"https://magpi.raspberrypi.org/articles/set-up-raspberry-pi-4"},"Here is one such article from the folks over at MagPi")," (there are many more, but this will be outside of what I'm covering here)."),(0,o.kt)("p",null,"Once you've done that you'll want to enable SSH so you can develop remotely. ",(0,o.kt)("a",{parentName:"p",href:"https://www.raspberrypi.org/documentation/remote-access/ssh/"},"Here is a quick how to")," on that."),(0,o.kt)("p",null,"Once you've got your RPi set up, you'll want to get all of your tools installed."),(0,o.kt)("h2",{id:"tech-stack"},"Tech Stack"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"On the RPi")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Node.js",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"TypeScript"))),(0,o.kt)("li",{parentName:"ul"},"InfluxDB"),(0,o.kt)("li",{parentName:"ul"},"Grafana")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Locally")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"VSCode"),(0,o.kt)("li",{parentName:"ul"},"Any terminal (",(0,o.kt)("a",{parentName:"li",href:"https://iterm2.com/"},"iTerm")," is great)")),(0,o.kt)("h2",{id:"nodeyarn"},"Node/Yarn"),(0,o.kt)("p",null,"I used ",(0,o.kt)("a",{parentName:"p",href:"https://morioh.com/p/95521373ce3d"},"this article from Joshua Carter")," to set up Node/Yarn."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Note")," I used the latest LTS version of node, which meant swapping out ",(0,o.kt)("inlineCode",{parentName:"p"},"12.X")," for ",(0,o.kt)("inlineCode",{parentName:"p"},"14.X")," in the first ",(0,o.kt)("inlineCode",{parentName:"p"},"cURL")," command."),(0,o.kt)("h2",{id:"influxgrafana"},"Influx/Grafana"),(0,o.kt)("p",null,"I followed a ",(0,o.kt)("a",{parentName:"p",href:"https://simonhearne.com/2020/pi-influx-grafana/"},"great tutorial from Simon Hearne")," on setting up Influx v1.X with Grafana."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Note"),": If you want to run v2.X of InfluxDB, you'll need to be running a 64bit OS on your RPI. ",(0,o.kt)("a",{parentName:"p",href:"https://community.influxdata.com/t/trying-to-install-influxdb-2-0-beta-on-raspberry-pi-4b-w-4gb-ram/13153"},"More about that here"),"."),(0,o.kt)("h2",{id:"vscode"},"VSCode"),(0,o.kt)("p",null,"You can run VSCode on your Raspberry Pi, and it may work great for you! I however, bought the 1GB RAM version of the RPi 4 Model B. Between ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn install")," and trying to write in VSCode, I ended up locking up my RPi."),(0,o.kt)("p",null,"So I thought, there has to be a better way to do this."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"VSCode has entered the chat...")),(0,o.kt)("p",null,"Remember when, what may feel like an eternity ago, we enabled SSH on our RPi? Well it turns out VSCode ",(0,o.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/learn/develop-cloud/ssh-lab-machines"},"has the ability for us to write code remotely using SSH"),". This is the part of the project where I got all giddy. I am not a big fan of setting all of the intricate little pieces up. Where I start to see the possibilities and excitement is once I can write some code."),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Once you've got all of the pieces assembled, you can start to look at putting the sensor on, and getting Node communicating with it."),(0,o.kt)("p",null,"For this next part, I liked to SSH into my RPi and do any ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn")," commands through the terminal on my remote machine. Any code written I would write in the VSCode enabled with SSH."),(0,o.kt)("h1",{id:"code-with-node"},"Code with Node"),(0,o.kt)("p",null,"Here is my ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," so you can get a view of what dependencies you'll be adding."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "scripts": {\n    "start": "NODE_OPTIONS=--max_old_space_size=1000 TS_NODE_FILES=src/* nodemon src/index.ts -e ts",\n    "build": "tsc",\n    "vroom": "yarn build && NODE_OPTIONS=--max_old_space_size=1000 ./dist/src/index.js"\n  },\n  "devDependencies": {\n    "@types/node-dht-sensor": "^0.4.0",\n    "@typescript-eslint/eslint-plugin": "^4.18.0",\n    "@typescript-eslint/parser": "^4.18.0",\n    "eslint": "^7.22.0",\n    "eslint-config-prettier": "^8.1.0",\n    "eslint-plugin-jest": "^24.3.2",\n    "eslint-plugin-node": "^11.1.0",\n    "nodemon": "^2.0.7",\n    "prettier": "^2.2.1",\n    "ts-node": "^9.1.1",\n    "typescript": "^4.2.3"\n  },\n  "dependencies": {\n    "influx": "^5.8.0",\n    "node-dht-sensor": "^0.4.3"\n  }\n}\n')),(0,o.kt)("h2",{id:"typescript"},"TypeScript"),(0,o.kt)("p",null,"I've recently become quite the TypeScript convert, so much so that I refuse to start a project without it. If you don't like TypeScript, or don't want to use it, feel free to skip to the next section."),(0,o.kt)("h3",{id:"quick-start"},"Quick Start"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add -D typescript @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint eslint-config-prettier eslint-plugin-jest eslint-plugin-node nodemon prettier ts-node\n")),(0,o.kt)("p",null,"From here you can run ",(0,o.kt)("inlineCode",{parentName:"p"},"tsc --init")," or you can copy my ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," below. (This will live at the root of your project directory)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'},'{\n  "compilerOptions": {\n    "target": "es6",\n    "module": "commonjs",\n    "declaration": true,\n    "sourceMap": true,\n    "outDir": "dist",\n    "rootDir": "./",\n    "strict": true,\n    "esModuleInterop": true\n  }\n}\n')),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Note"),": you don't need the following, they are just nice to have for any ",(0,o.kt)("em",{parentName:"p"},"JS/TS")," project to keep your code clean."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Eslint")),(0,o.kt)("p",null,"We can add two files to our root that give us a quick Eslint setup."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title=".eslintrc.js"',title:'".eslintrc.js"'},'module.exports = {\n  root: true,\n  parser: "@typescript-eslint/parser",\n\n  parserOptions: {\n    ecmaVersion: 2020,\n  },\n  plugins: ["@typescript-eslint", "jest"],\n  extends: [\n    "eslint:recommended",\n    "plugin:@typescript-eslint/recommended",\n    "plugin:jest/recommended",\n    "plugin:node/recommended",\n    "prettier",\n  ],\n};\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title=".eslintignore"',title:'".eslintignore"'},"# don't ever lint node_modules\nnode_modules\n# don't lint build output (make sure it's set to your correct build folder name)\ndist\n# don't lint nyc coverage output\ncoverage\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Prettier")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title=".prettierrc.js"',title:'".prettierrc.js"'},'module.exports = {\n  printWidth: 100,\n  singleQuote: true,\n  trailingComma: "es5",\n};\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".prettierignore"',title:'".prettierignore"'},"build\ncoverage\ndist\n")),(0,o.kt)("p",null,"Et Voila! We are all set and ready to go!"),(0,o.kt)("h2",{id:"project-dependencies"},"Project Dependencies"),(0,o.kt)("p",null,"The meaty bits:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add influx node-dht-sensor\n")),(0,o.kt)("p",null,"The explanation bits:"),(0,o.kt)("p",null,"As you can see, we only have two dependencies: ",(0,o.kt)("inlineCode",{parentName:"p"},"influx")," and ",(0,o.kt)("inlineCode",{parentName:"p"},'node-dht-sensor"'),". You might be thinking, wait... I thought ",(0,o.kt)("a",{parentName:"p",href:"http://johnny-five.io/"},"Johnny Five")," was the go-to Node library for IoT. Well, you're not wrong! In fact, that is where this project started. It turns out, Johnny Five's examples only have the DHT11 sensors ",(0,o.kt)("a",{parentName:"p",href:"http://johnny-five.io/examples/temperature-DHT11_I2C_NANO_BACKPACK/"},"with a backpack"),'. Now, I\'m sure with some clever coding, and further understanding of GPIO and how Johnny Five interacts with them, you could definitely get "J5" to play nicely. That being said, we want EASY not difficult \ud83d\ude05.'),(0,o.kt)("p",null,"So how are we going to talk to the DHT11 sensor from Node? ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/momenso/node-dht-sensor"},(0,o.kt)("inlineCode",{parentName:"a"},"node-dht-sensor"))," to the rescue. After some quick searching, it turns out, someone else has also had this problem (imagine that \ud83d\ude04). On their ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/momenso/node-dht-sensor#first-example"},(0,o.kt)("inlineCode",{parentName:"a"},"README")),", you'll find a helpful diagram for connecting your RPi and the sensor. From there, we can start writing some code!"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Note"),": I chose the same pins that their diagram shows and it worked great."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.raspberrypi.org/documentation/usage/gpio/"},"RPi GPIO Pin Diagram")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"+ => 5v\n- => Ground\nout => Pin 4\n")),(0,o.kt)("h2",{id:"can-we-see-some-code-already"},"Can We See Some Code Already?"),(0,o.kt)("p",null,"... Absolutely!"),(0,o.kt)("p",null,"The folder structure will be quite simple, and should look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"./src\n|__ index.ts\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"index")," file will look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="index.ts"',title:'"index.ts"'},'import { promises as sensor } from "node-dht-sensor";\n\nsetInterval(async () => {\n  const { temperature, humidity } = await sensor.read(11, 4);\n  console.log(`temp: ${temperature}\xb0C, humidity: ${humidity}%`);\n}, 1000);\n')),(0,o.kt)("p",null,"You tell the ",(0,o.kt)("inlineCode",{parentName:"p"},"read")," function that you are using a ",(0,o.kt)("inlineCode",{parentName:"p"},"DHT11")," sensor by saying ",(0,o.kt)("inlineCode",{parentName:"p"},"read(11"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"read")," function will then read the RPi boards ",(0,o.kt)("inlineCode",{parentName:"p"},"pin 4"),", which is what you hooked your sensor up to. Every 1000ms, it will read from the sensor and output the results."),(0,o.kt)("p",null,"Great, now how do you start this up?"),(0,o.kt)("p",null,"For fast iteration, I've added ",(0,o.kt)("inlineCode",{parentName:"p"},"nodemon")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ts-node")," to this project. But if you look back at the ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," you'll notice one other prefix before our startup command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"NODE_OPTIONS=--max_old_space_size=1000\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/api/cli.html#cli_max_old_space_size_size_in_megabytes"},"Max old space size")," is a node option we can pass that tells node how much memory it can afford to take up. This command is written in megabytes. From their documentation:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"On a machine with 2GB of memory, consider setting this to 1536 (1.5GB) to leave some memory for other uses and avoid swapping.")),(0,o.kt)("p",null,"On my machine, I have 1GB of memory, so I set it to 1000. If I was doing anything other than running this node project, I would set that a little lower just to give the RPi some room to breathe. If Node is left to its own devices, it can be a huge memory hog!"),(0,o.kt)("p",null,"The rest of the command looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"TS_NODE_FILES=src/* nodemon src/index.ts -e ts\n")),(0,o.kt)("p",null,"A few things are going on here:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"you're telling ",(0,o.kt)("inlineCode",{parentName:"li"},"ts-node")," where it can find your files"),(0,o.kt)("li",{parentName:"ul"},"you're giving ",(0,o.kt)("inlineCode",{parentName:"li"},"nodemon")," an entry point into your app (",(0,o.kt)("inlineCode",{parentName:"li"},"src/index.ts"),")"),(0,o.kt)("li",{parentName:"ul"},"you're telling ",(0,o.kt)("inlineCode",{parentName:"li"},"nodemon")," to exec ",(0,o.kt)("inlineCode",{parentName:"li"},"ts"),", invoking ",(0,o.kt)("inlineCode",{parentName:"li"},"ts-node"))),(0,o.kt)("p",null,"Once you've added this to your ",(0,o.kt)("inlineCode",{parentName:"p"},"scripts")," in your ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," file, you can now run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn start")," in your ",(0,o.kt)("inlineCode",{parentName:"p"},"ssh")," terminal connected to your RPi."),(0,o.kt)("p",null,"Finally, you get to see some code run!"),(0,o.kt)("p",null,"Once you've run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn start"),", you should see your terminal start to output the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"temperature: 20\xb0C, humidity: 39%\n")),(0,o.kt)("p",null,"(You may run into an issue where your script doesn't have permissions to read from GPIO. You can run ",(0,o.kt)("inlineCode",{parentName:"p"},"sudo yarn start"),", or you can ",(0,o.kt)("a",{parentName:"p",href:"https://www.raspberrypi.org/forums/viewtopic.php?t=5185#p161013"},"do it the safe way with user permissions")),(0,o.kt)("p",null,"Your values will vary of course, unless your house is set to the same temp and have the same humidity \ud83d\ude04."),(0,o.kt)("p",null,"\ud83c\udf89 Yay you did it! Now it is time to measure!"),(0,o.kt)("h1",{id:"grafana"},"Grafana"),(0,o.kt)("p",null,"Having set up InfluxDB and the Grafana UI, I can tell you're itching to get some visualizations built. Wait no longer!"),(0,o.kt)("p",null,"In order to start streaming data points to your InfluxDB you can utilize the ",(0,o.kt)("inlineCode",{parentName:"p"},"influx")," package you installed earlier."),(0,o.kt)("p",null,"You'll adjust your code in the ",(0,o.kt)("inlineCode",{parentName:"p"},"./src/index.ts")," file to look like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="index.ts"',title:'"index.ts"'},'import { InfluxDB, FieldType } from "influx";\nimport { promises as sensor } from "node-dht-sensor";\n\nconst pass = process.env.IN_PASS;\nconst influx = new InfluxDB({\n  host: "localhost",\n  username: "grafana",\n  password: pass,\n  database: "home",\n  schema: [\n    {\n      measurement: "response_times",\n      fields: {\n        path: FieldType.STRING,\n        duration: FieldType.INTEGER,\n      },\n      tags: ["sensor"],\n    },\n  ],\n});\n\nsetInterval(async () => {\n  const { temperature, humidity } = await sensor.read(11, 4);\n  console.log(`temperature: ${temperature}\xb0C, humidity: ${humidity}%`);\n\n  try {\n    influx.writePoints([\n      {\n        measurement: "humidity",\n        tags: { sensor: "humidity" },\n        fields: { humidity },\n      },\n      {\n        measurement: "temp",\n        tags: { sensor: "temperature" },\n        fields: { temperature },\n      },\n    ]);\n  } catch (e) {\n    console.log(e);\n  }\n}, 1000);\n')),(0,o.kt)("p",null,"There are a few new things here. I'll walk through them quickly:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"First you initialize an instance of ",(0,o.kt)("inlineCode",{parentName:"li"},"InfluxDB")," in your app."),(0,o.kt)("li",{parentName:"ul"},"The configuration you pass that instance, is what will allow you to connect to the locally running db (You'll see ",(0,o.kt)("inlineCode",{parentName:"li"},"process.env.IN_PASS"),", this is an env var exported with the password set to your db user ",(0,o.kt)("inlineCode",{parentName:"li"},"grafana"),". It is always good practice to keep your credentials out of your scripts... even if it is your own code \ud83d\ude04)"),(0,o.kt)("li",{parentName:"ul"},"In your ",(0,o.kt)("inlineCode",{parentName:"li"},"setInterval")," you've added an ",(0,o.kt)("inlineCode",{parentName:"li"},"influx.writePoints")," this is where the magic happens. Once every ",(0,o.kt)("inlineCode",{parentName:"li"},"1000"),"ms it will send influx data points tagged with its respective value.")),(0,o.kt)("p",null,"Now that you've got data streaming to InfluxDB you can head over to Grafana. In Grafana you'll want to create a new dashboard. Once you've done that, you'll create a new panel. Inside of that panel, it will allow you to start writing (or selecting) a query to Influx. If you've set up your DB with all the same names as the tutorial outlined, your query should look something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'SELECT mean("humidity") FROM "humidity" WHERE $timeFilter GROUP BY time($__interval) fill(null)\n')),(0,o.kt)(r.z,{size:800,src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rd3zncwz0tie43ckzh3.png",altText:"Influx DB Query",mdxType:"InlineBlogImage"}),(0,o.kt)("p",null,'And there you go! You\'ve got data visualizations in Grafana with data from InfluxDB all streaming from our Node "server" written in TypeScript!'),(0,o.kt)(r.z,{size:800,src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dr99q35cirgx6u1gt350.png",altText:"Newly Updated Grafana Dashboard",mdxType:"InlineBlogImage"}),(0,o.kt)("hr",null),(0,o.kt)("p",null,"From here, the possibilities are endless. You can start integrating with smart home api's to control switches, or send yourself alerts when humidity levels drop to low."),(0,o.kt)("p",null,"If you've stayed with me through this whole process, thank you! I hope you've enjoyed it, and had a little fun along the way. I certainly did \ud83d\ude04."))}m.isMDXComponent=!0}}]);